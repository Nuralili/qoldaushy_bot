# main.py
import os
import requests
import asyncio
import threading
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from flask import Flask, render_template_string
from dotenv import load_dotenv

# üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
HF_TOKEN = os.getenv("HF_TOKEN")
HF_MODEL = os.getenv("HF_MODEL")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
app = Flask(__name__)

# üß† –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ Hugging Face AI
def generate_ai_reply(message: str) -> str:
    try:
        url = f"https://api-inference.huggingface.co/models/{HF_MODEL}"
        headers = {"Authorization": f"Bearer {HF_TOKEN}"}
        payload = {"inputs": message}

        response = requests.post(url, headers=headers, json=payload, timeout=60)

        if response.status_code != 200:
            print("–û—à–∏–±–∫–∞ Hugging Face:", response.text)
            return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

        data = response.json()

        # –ò–Ω–æ–≥–¥–∞ HuggingFace –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å generated_text
        if isinstance(data, list) and len(data) and "generated_text" in data[0]:
            return data[0]["generated_text"].strip()
        elif isinstance(data, dict) and "generated_text" in data:
            return data["generated_text"].strip()
        else:
            return "ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –∏–Ω–∞—á–µ."
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò."

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler()
async def handle_message(msg: types.Message):
    user_text = msg.text.strip()
    if not user_text:
        return

    await msg.answer("üß† –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {user_text}\n"
        f"–¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥. "
        f"–û–±—â–∞–π—Å—è –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫, –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç. "
        f"–î–∞–π —Å–æ–≤–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏, –ø–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —á—É–≤—Å—Ç–≤–∞—Ö. "
        f"–ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª."
    )

    reply = generate_ai_reply(prompt)
    await msg.answer(reply)

# üåê Flask —Å–∞–π—Ç
@app.route('/')
def index():
    html = """
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>Qoldaushy Bot</title>
        <style>
            body {
                font-family: 'Segoe UI', sans-serif;
                background: linear-gradient(120deg, #89f7fe, #66a6ff);
                color: #222;
                text-align: center;
                padding: 50px;
            }
            h1 {
                font-size: 48px;
                margin-bottom: 10px;
            }
            p {
                font-size: 18px;
                max-width: 700px;
                margin: 15px auto;
            }
            .card {
                background: white;
                border-radius: 20px;
                padding: 40px;
                box-shadow: 0 8px 20px rgba(0,0,0,0.15);
                display: inline-block;
            }
            a {
                color: #0066cc;
                text-decoration: none;
                font-weight: bold;
            }
            a:hover {
                text-decoration: underline;
            }
        </style>
    </head>
    <body>
        <div class="card">
            <h1>ü§ñ Qoldaushy Bot</h1>
            <p><b>Qoldaushy Bot</b> ‚Äî —ç—Ç–æ –ø—Ä–æ–µ–∫—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —à–∫–æ–ª—å–Ω–∏–∫–æ–≤,
            –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å –±—É–ª–ª–∏–Ω–≥–æ–º, —Ç—Ä–µ–≤–æ–≥–æ–π –∏–ª–∏ —Å—Ç—Ä–µ—Å—Å–æ–º. –ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è
            –≤ —á—É–≤—Å—Ç–≤–∞—Ö, –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–∞, —á—Ç–æ–±—ã –≤—ã—Ä–∞–∑–∏—Ç—å —Å–µ–±—è, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –¥–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.</p>

            <p>üí¨ –û–Ω —É–º–µ–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏ –∏ –ø–æ-–∫–∞–∑–∞—Ö—Å–∫–∏, –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç —Å –¥–æ–±—Ä–æ—Ç–æ–π
            –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ë–æ—Ç –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç, –∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å —Å–µ–±—è.</p>

            <p>üå± <b>–¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞</b> ‚Äî —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–∞–∂–¥–æ–º—É —É—á–µ–Ω–∏–∫—É, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –º–µ—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏.
            –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º –¥—Ä—É–≥–æ–º –∏ —Å–æ–≤–µ—Ç—á–∏–∫–æ–º.</p>

            <p><b>–ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</b><br>
            <a href="https://t.me/qolda_bot" target="_blank">@qolda_bot</a></p>
        </div>
    </body>
    </html>
    """
    return render_template_string(html)

# üöÄ –ó–∞–ø—É—Å–∫ Flask –∏ Telegram –±–æ—Ç–∞
async def run_bot():
    print("ü§ñ Qoldaushy Bot –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

def start_flask():
    app.run(host='0.0.0.0', port=10000)

if __name__ == '__main__':
    threading.Thread(target=start_flask).start()
    asyncio.run(run_bot())
