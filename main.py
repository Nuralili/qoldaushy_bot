import os
import threading
import asyncio
import requests
from flask import Flask, render_template
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.types import Message
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
HF_TOKEN = os.getenv("HF_TOKEN")
HF_MODEL = os.getenv("HF_MODEL")

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# --- Flask —Å–∞–π—Ç ---
app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")

# --- –ò–ò –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Hugging Face ---
def ask_ai(prompt: str) -> str:
    if not HF_TOKEN or not HF_MODEL:
        return "–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ –º–æ–¥–µ–ª—å –ò–ò."
    headers = {"Authorization": f"Bearer {HF_TOKEN}"}
    payload = {"inputs": prompt}
    try:
        response = requests.post(
            f"https://api-inference.huggingface.co/models/{HF_MODEL}",
            headers=headers,
            json=payload,
            timeout=30
        )
        data = response.json()
        if isinstance(data, list) and len(data) > 0 and "generated_text" in data[0]:
            return data[0]["generated_text"]
        elif "error" in data:
            return f"–û—à–∏–±–∫–∞ –ò–ò: {data['error']}"
        else:
            return "–ò–ò –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ò–ò: {e}"

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer("–°”ô–ª–µ–º! –ú–µ–Ω Qoldaushy Bot ü§ñ\n"
                         "–ú–µ–Ω —Å–µ–Ω—ñ“£ –∫”©“£—ñ–ª-–∫“Ø–π—ñ“£–¥—ñ —Ç“Ø—Å—ñ–Ω—ñ–ø, –∫–µ“£–µ—Å –±–µ—Ä—É–≥–µ —Ç—ã—Ä—ã—Å–∞–º—ã–Ω.\n"
                         "–ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç ‚ù§Ô∏è")

@dp.message()
async def handle_message(message: Message):
    user_text = message.text
    prompt = f"–¢—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–ª–æ–≤–µ–∫ –ø–∏—à–µ—Ç: '{user_text}'. –ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –µ–≥–æ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞ –∏ –¥–∞–π –¥–æ–±—Ä—ã–π, —É–º–Ω—ã–π —Å–æ–≤–µ—Ç, –∫–∞–∫ –æ—Ç —ç—Ç–æ–≥–æ –∏–∑–±–∞–≤–∏—Ç—å—Å—è. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º, –∫–∞–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    answer = ask_ai(prompt)
    await message.answer(answer)

# --- –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ ---
async def run_bot():
    await dp.start_polling(bot)

# --- –ó–∞–ø—É—Å–∫ Flask ---
if __name__ == "__main__":
    threading.Thread(target=lambda: asyncio.run(run_bot()), daemon=True).start()
    app.run(host="0.0.0.0", port=10000)
