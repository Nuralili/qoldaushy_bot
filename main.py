import os
import asyncio
import threading
import requests
from aiogram import Bot, Dispatcher, types
from flask import Flask, render_template, request, jsonify
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ .env –∏–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
HF_TOKEN = os.getenv("HF_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
app = Flask(__name__)

# --- –§—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò ---
def ask_ai(message: str) -> str:
    url = "https://api-inference.huggingface.co/models/meta-llama/Llama-3-8B-Instruct"
    headers = {"Authorization": f"Bearer {HF_TOKEN}"}
    prompt = f"""–¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —à–∫–æ–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥.
–¢—ã –æ–±—â–∞–µ—à—å—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–µ —Å –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏.
–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò.

–°–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞: {message}

–û—Ç–≤–µ—Ç:"""
    try:
        r = requests.post(url, headers=headers, json={"inputs": prompt}, timeout=60)
        data = r.json()
        if isinstance(data, list) and len(data) > 0 and "generated_text" in data[0]:
            text = data[0]["generated_text"]
        elif "generated_text" in data:
            text = data["generated_text"]
        else:
            return "–ò–∑–≤–∏–Ω–∏, –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª. –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ?"
        return text.split("–û—Ç–≤–µ—Ç:")[-1].strip()
    except Exception:
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

# --- Telegram –±–æ—Ç ---
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "–°”ô–ª–µ–º! –Ø Qoldaushy Bot üí¨\n\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Ç–µ–±—è –≤—ã—Å–ª—É—à–∞—Ç—å. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è —Ç—Ä–µ–≤–æ–∂–∏—Ç ‚Äî "
        "–∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Å–æ–≤–µ—Ç–æ–º."
    )

@dp.message_handler()
async def reply_user(message: types.Message):
    await message.answer("–î–∞–π –º–Ω–µ —Å–µ–∫—É–Ω–¥—É, —è –ø–æ–¥—É–º–∞—é...")
    answer = ask_ai(message.text)
    await message.answer(answer)

# --- Flask —Å–∞–π—Ç ---
@app.route("/")
def home():
    return render_template("index.html")

@app.route("/chat", methods=["POST"])
def chat():
    data = request.get_json()
    user_msg = data.get("message", "")
    if not user_msg.strip():
        return jsonify({"reply": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å üôÉ"})
    reply = ask_ai(user_msg)
    return jsonify({"reply": reply})

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ ---
async def run_bot():
    print("ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot, skip_updates=True, handle_signals=False)

# --- –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    threading.Thread(target=lambda: asyncio.run(run_bot()), daemon=True).start()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
