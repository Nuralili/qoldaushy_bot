import os
import asyncio
import threading
from flask import Flask, render_template
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import aiohttp
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
HF_TOKEN = os.getenv("HF_TOKEN")
HF_MODEL = os.getenv("HF_MODEL", "mistralai/Mixtral-8x7B-Instruct-v0.1")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN or not HF_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã BOT_TOKEN –∏–ª–∏ HF_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# Flask-—Å–∞–π—Ç
app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Hugging Face API
async def ask_ai(user_text: str) -> str:
    prompt = (
        f"–¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —à–∫–æ–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –ø–æ –∏–º–µ–Ω–∏ Qoldaushy. "
        f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É —É—á–µ–Ω–∏–∫—É –≥—Ä—É—Å—Ç–Ω–æ, —Ç—Ä–µ–≤–æ–∂–Ω–æ –∏–ª–∏ —Ç—è–∂–µ–ª–æ. "
        f"–û–Ω –Ω–∞–ø–∏—Å–∞–ª: '{user_text}'. "
        f"–û—Ç–≤–µ—Ç—å –º—è–≥–∫–æ, –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏, –∫–æ—Ä–æ—Ç–∫–æ –∏ —á–µ–ª–æ–≤–µ—á–Ω–æ, "
        f"–Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±–µ –Ω–∞–ø–∏—Å–∞–ª–∏ (—Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º). "
        f"–ù–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ –±–æ—Ç."
    )

    headers = {
        "Authorization": f"Bearer {HF_TOKEN}"
    }
    payload = {
        "inputs": prompt,
        "parameters": {"max_new_tokens": 200, "temperature": 0.8}
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"https://api-inference.huggingface.co/models/{HF_MODEL}",
                headers=headers,
                json=payload,
                timeout=80
            ) as resp:
                data = await resp.json()
                if isinstance(data, dict) and "error" in data:
                    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –∏–Ω–∞—á–µ üí≠"
                if isinstance(data, list) and "generated_text" in data[0]:
                    return data[0]["generated_text"].split("–û—Ç–≤–µ—Ç:")[-1].strip()
                return "–Ø –ø—ã—Ç–∞—é—Å—å –ø–æ–Ω—è—Ç—å —Ç–µ–±—è, –Ω–æ, –∫–∞–∂–µ—Ç—Å—è, –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª. –ü–æ–ø—Ä–æ–±—É–π —Å–∫–∞–∑–∞—Ç—å –∏–Ω–∞—á–µ üí¨"
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    user_text = message.text
    await message.answer("üß† –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    reply = await ask_ai(user_text)
    await message.answer(reply)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞
async def run_bot():
    print("ü§ñ Qoldaushy Bot –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot, skip_updates=True, handle_signals=False)

# –ó–∞–ø—É—Å–∫ Flask + aiogram –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
if __name__ == "__main__":
    threading.Thread(target=lambda: asyncio.run(run_bot())).start()
    app.run(host="0.0.0.0", port=10000)
