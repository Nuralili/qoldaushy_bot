import os
import logging
from aiogram import Bot, Dispatcher, executor, types
import requests

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
HF_TOKEN = os.getenv("HF_TOKEN")
HF_MODEL = os.getenv("HF_MODEL", "mistralai/Mixtral-8x7B-Instruct-v0.1")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

def ask_ai(prompt: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Hugging Face –º–æ–¥–µ–ª—å"""
    headers = {"Authorization": f"Bearer {HF_TOKEN}"}
    payload = {"inputs": prompt}
    try:
        r = requests.post(
            f"https://api-inference.huggingface.co/models/{HF_MODEL}",
            headers=headers,
            json=payload,
            timeout=30
        )
        if r.status_code == 200:
            data = r.json()
            if isinstance(data, list) and len(data) > 0:
                return data[0].get("generated_text", "").strip()
        return "–ò–∑–≤–∏–Ω–∏, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
    except Exception:
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

@dp.message_handler(commands=["start", "help"])
async def start_message(msg: types.Message):
    text = (
        "–°”ô–ª–µ–º! üëã –ú–µ–Ω Qoldaushy Bot ‚Äî —Å–µ–Ω—ñ“£ –∫”©–º–µ–∫—à—ñ“£.\n\n"
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø Qoldaushy Bot ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è —Ç—Ä–µ–≤–æ–∂–∏—Ç. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å –ø—Ä–∏—á–∏–Ω—É "
        "–∏ –¥–∞–º —Å–æ–≤–µ—Ç, –∫–∞–∫ —Å —ç—Ç–∏–º —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è."
    )
    await msg.answer(text)

@dp.message_handler()
async def handle_message(msg: types.Message):
    user_text = msg.text.strip()
    if not user_text:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç üí¨")
        return

    prompt = (
        "–¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —à–∫–æ–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –≥–æ–≤–æ—Ä–∏—à—å –º—è–≥–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. "
        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –ø–æ-—Ä—É—Å—Å–∫–∏ ‚Äî –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –µ—Å–ª–∏ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º ‚Äî –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º. "
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–Ω—è—Ç—å –ø—Ä–∏—á–∏–Ω—É –µ–≥–æ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞ "
        "–∏ –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç.\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞: {user_text}\n\n–û—Ç–≤–µ—Ç:"
    )

    answer = ask_ai(prompt)
    await msg.answer(answer)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
